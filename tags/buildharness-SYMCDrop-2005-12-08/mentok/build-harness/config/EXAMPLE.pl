
## Platforms [desc here]

# REQUIRED: platforms
# 'hostname' => 'arch'

%platforms = (
              '<hostname>'  => '<Arch>',
);

# Raw array of hosts. 
@buildhosts = keys(%platforms);
# How long until we give up on a host. 
$alarmwait  = 60*180; # 180 mins

# REQUIRED:projectname
$projectname = 'preomni';

# REQUIRED: buildroot
$buildroot   = "/home/builds/$projectname";
# REQUIRED: statusdir
$statusdir   = "$buildroot/\$ddir/status";
# REQUIRED: toolsdir
$toolsdir    = '/home/builds/scripts';

#
# For our webserver - used in buildreport.pl
# OPTIONAL
#
$urlprefix  = "/eng/$projectname/builds";
$outputfile = "$buildroot/summary.html";
$pkgdir     = "$ddir/package";

# Who we send email to on build status
$notify     = "<someone_who_cares>\@.com";

# LEGACY: configs ()
@configs = ( '<projectname>' );

# REQUIRED: SCvar (Source Control Variable)

%SCvar = (
          projectname => 'SomeCodeBase',
          SCvar1 => {
                    name     => 'SomeCodeBase_FromCVS',
                    method   => 'cvs',
                    cvsmod   => 'src',
                    _CVSROOT => ':ext:user@hostname:/cvs/SomeCodeBase',
                    _CVS_RSH => $ssh,
                   },
          SCvar2 => {
                    name        => 'SomeCodeBasedocs_fromP4',
                    method      => 'perforce',
                    revision    => ' ', # yes.
                    _P4CLIENT   => 'working_client_spec',
                    _P4TEMPLATE => 'pristine_client_spec_template',
                    _P4PORT     => 'p4server:1666',
                    _P4USER     => 'p4user',
                    _P4PASSWD   => 'p4passwd',
                    _P4ROOT     => '/home/builds/SomeCodeBase/templates',
                   },
);

#
# This is a config file with a separate client_build_sequence
# to be run for each host. 
# REQUIRED: maincmd
#
%maincmd    = (
            'hostname'     => 'special_config_file',
);

# REQUIRED: client_build_sequence

# RUNDIR|USER|COMMAND|ARGS|TARGETS|IGNOREERROR|ENVS|ARBLOGFILE

# RUNDIR, dir to change to, 
#	can embed code.
# USER, user to run cmd as
# COMMAND, command to run
#	can embed code
# ARGS, arguments for the command
#	can embed code
# TARGETS, make-style targets for the command
#	can embed code
# IGNOREERROR, ignore errors generated by a command (Set it to "1" to enable)
# ENVS, set ENV vars before running cmd, form is "VAR=foo:bar|BAR=blah"
#	can embed code
# ARBLOGFILE, an arbitrary logfile, otherwise will form from command/target
#	can embed code

@client_build_sequence = (
        [ "", "", "$gmake", "-f Makefile.build", "", "", 
          "", "", "" ],
        [ "", "", "mkdir", "-p $buildroot/\$ddir/package", ""  ],
        [ "", "", "cp", "-f ../bin/something.o $buildroot/\$ddir/package/something2.o", "" ],
        [ "", "", "$gmake", "", "full-clean" ],
        [ "", "", "$gmake", "-f Makefile.build", "", "", 
          "", "", "" ],
        [ "", "", "cp", "-f ../bin/something.o $buildroot/\$ddir/package/something3.o", "" ],
	[ "", "", "$gmake", "-f Makefile.build", "package" ],
);

#
# FLUFF: buildtool
# This is the script that picks things up on the client side.
$buildtool   = "$toolsdir/runbuild.pl";
# REQUIRED: cmdline
$cmdline     = "$buildtool";

# OPTIONAL PRUNE_AFTER (Check Defaults.pl for default value)
# Our prunes.pl uses this to detemine whether or not to reap builds.
$PRUNE_AFTER=15;

# OPTIONAL (To override the normal disting mechanism)
@altdist = ("directory", "command", 
            "directory", "command"); 

