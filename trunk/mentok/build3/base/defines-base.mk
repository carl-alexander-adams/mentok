#
# Macros needed for bootstrapping the base of the build system.
#
ifeq ($(BIN_PLATFORMUTIL),)
BIN_PLATFORMUTIL=$(BS_ROOT)/util/plat.pl
endif

ifeq ($(BIN_SHADOWTREE),)
BIN_SHADOWTREE=$(BS_ROOT)/util/shadowtree.pl
endif

BS_OS_HOSTNAME:=$(shell $(BIN_PLATFORMUTIL) -n)
BS_OS_NAME:=$(shell $(BIN_PLATFORMUTIL) -s)
BS_OS_REVMAJOR:=$(shell $(BIN_PLATFORMUTIL) -M)
BS_OS_REVMINOR:=$(shell $(BIN_PLATFORMUTIL) -N)
BS_OS_REVPATCH:=$(shell $(BIN_PLATFORMUTIL) -P)
BS_OS_RUNTIMEOLDNAME:=$(shell $(BIN_PLATFORMUTIL) -R)
BS_OS_RUNTIMENAME:=$(shell $(BIN_PLATFORMUTIL) -w)
BS_OS_RUNTIMEREVMAJOR:=$(shell $(BIN_PLATFORMUTIL) -x)
BS_OS_RUNTIMEREVMINOR:=$(shell $(BIN_PLATFORMUTIL) -y)
BS_OS_RUNTIMEREVPATCH:=$(shell $(BIN_PLATFORMUTIL) -z)
BS_OS_MACHINETYPE:=$(shell $(BIN_PLATFORMUTIL) -m)
BS_OS_MACHINEPROC:=$(shell $(BIN_PLATFORMUTIL) -p)
BS_OS_MACHINEINSTSET:=$(shell $(BIN_PLATFORMUTIL) -i)


runtime_full=$(BS_OS_RUNTIMENAME)$(if $(BS_OS_RUNTIMEREVMAJOR),-$(BS_OS_RUNTIMEREVMAJOR))$(if $(BS_OS_RUNTIMEREVMINOR),.$(BS_OS_RUNTIMEREVMINOR))$(if $(BS_OS_RUNTIMEREVPATCH),.$(BS_OS_RUNTIMEREVPATCH))
runtime_fallback_1=$(BS_OS_RUNTIMENAME)$(if $(BS_OS_RUNTIMEREVMAJOR),-$(BS_OS_RUNTIMEREVMAJOR))$(if $(BS_OS_RUNTIMEREVMINOR),.$(BS_OS_RUNTIMEREVMINOR))
runtime_fallback_2=$(BS_OS_RUNTIMENAME)$(if $(BS_OS_RUNTIMEREVMAJOR),-$(BS_OS_RUNTIMEREVMAJOR))
runtime_fallback_3=$(BS_OS_RUNTIMENAME)
runtime_fallback_4=$(BS_OS_RUNTIMEOLDNAME)

os_full=$(BS_OS_NAME)-$(BS_OS_REVMAJOR)$(if $(BS_OS_REVMINOR),.$(BS_OS_REVMINOR))$(if $(BS_OS_REVPATCH),.$(BS_OS_REVPATCH))
os_fallback_1=$(BS_OS_NAME)-$(BS_OS_REVMAJOR)$(if $(BS_OS_REVMINOR),.$(BS_OS_REVMINOR))
os_fallback_2=$(BS_OS_NAME)-$(BS_OS_REVMAJOR)
os_fallback_3=$(BS_OS_NAME)


BS_PLATFORM_NOARCH=noarch
BS_PLATFORM_ARCH_FULL=$(os_full)-$(BS_OS_MACHINEINSTSET)-$(runtime_full)

BS_PLATFORM_ARCH_FALLBACK_1=$(os_fallback_1)-$(BS_OS_MACHINEINSTSET)-$(runtime_full) 
BS_PLATFORM_ARCH_FALLBACK_2=$(os_fallback_1)-$(BS_OS_MACHINEINSTSET)
BS_PLATFORM_ARCH_FALLBACK_3=$(os_fallback_3)-$(BS_OS_MACHINEINSTSET)
BS_PLATFORM_ARCH_FALLBACK_4=$(os_fallback_3)
BS_PLATFORM_ARCH_FALLBACK_5=$(os_full)-$(BS_OS_MACHINEINSTSET)-$(runtime_fallback_1) 
BS_PLATFORM_ARCH_FALLBACK_6=$(os_fallback_1)-$(BS_OS_MACHINEINSTSET)-$(runtime_full) 
BS_PLATFORM_ARCH_FALLBACK_7=$(os_fallback_1)-$(BS_OS_MACHINEINSTSET)-$(runtime_fallback_1) 



BS_PLATFORM_ARCH_LEGACYFALLBACK_1=$(BS_OS_NAME)-$(BS_OS_REVMAJOR)$(if $(BS_OS_REVMINOR),.$(BS_OS_REVMINOR))$(if $(BS_OS_REVPATCH),.$(BS_OS_REVPATCH))-$(BS_OS_MACHINEINSTSET)
BS_PLATFORM_ARCH_LEGACYFALLBACK_2=$(BS_OS_NAME)-$(BS_OS_REVMAJOR)$(if $(BS_OS_REVMINOR),.$(BS_OS_REVMINOR))-$(BS_OS_MACHINEINSTSET)
BS_PLATFORM_ARCH_LEGACYFALLBACK_3=$(BS_OS_NAME)-$(BS_OS_REVMAJOR)$(if $(BS_OS_REVMINOR),.$(BS_OS_REVMINOR))$(if $(BS_OS_REVPATCH),.$(BS_OS_REVPATCH))-$(BS_OS_MACHINETYPE)
BS_PLATFORM_ARCH_LEGACYFALLBACK_4=$(BS_OS_NAME)-$(BS_OS_REVMAJOR)$(if $(BS_OS_REVMINOR),.$(BS_OS_REVMINOR))-$(BS_OS_MACHINETYPE)


#
# include platform specific base macros
#
-include $(BS_ROOT)/base/defines-base-$(BS_PLATFORM_ARCH_FALLBACK_4).mk
-include $(BS_ROOT)/base/defines-base-$(BS_PLATFORM_ARCH_FALLBACK_3).mk
-include $(BS_ROOT)/base/defines-base-$(BS_PLATFORM_ARCH_FALLBACK_2).mk
-include $(BS_ROOT)/base/defines-base-$(BS_PLATFORM_ARCH_FALLBACK_1).mk
-include $(BS_ROOT)/base/defines-base-$(BS_PLATFORM_ARCH_FULL).mk

#
# Base module step 2.. some general build environment macros and common utilities
#

#
# Bin Programs & scripts
#
ifeq ($(BIN_COMPONENTUTIL),)
BIN_COMPONENTUTIL=$(BIN_PERL) $(BS_ROOT)/util/component-desc-util.pl
endif

#
# Info / Control macros.
#
BS_INFO_PREFIX="+ "
BS_WARN_PREFIX="\*\* "
BS_ERROR_PREFIX="\*\*\* ERROR "


BS_ROOT_TARGET_DIR=./BUILDTARGETS$(if $(strip $(BS_VTAG)),-$(strip $(BS_VTAG)))
BS_ARCH_TARGET_DIR=$(BS_ROOT_TARGET_DIR)/$(BS_PLATFORM_ARCH_FULL)
BS_NOARCH_TARGET_DIR=$(BS_ROOT_TARGET_DIR)/$(BS_PLATFORM_NOARCH)

BS_CURRENT_SRCDIR_ABSPATH=$(shell $(BIN_PWD))

ifeq ($(COMPONENT_ROOT_ABSPATH),)
COMPONENT_ROOT_ABSPATH:=$(shell $(BIN_CD) $(COMPONENT_ROOT) && $(BIN_PWD))
endif
export COMPONENT_ROOT_ABSPATH

ifeq ($(BS_DATE_YEAR),)
BS_DATE_YEAR:=$(shell $(BIN_DATE) +%Y)
endif
export BS_DATE_YEAR

ifeq ($(BS_DATE_MONTH),)
BS_DATE_MONTH:=$(shell $(BIN_DATE) +%m)
endif
export BS_DATE_MONTH

ifeq ($(BS_DATE_DAY),)
BS_DATE_DAY:=$(shell $(BIN_DATE) +%d)
endif
export BS_DATE_DAY

ifeq ($(BS_DATE_HOUR),)
BS_DATE_HOUR:=$(shell $(BIN_DATE) +%H)
endif
export BS_DATE_HOUR

ifeq ($(BS_DATE_MINUTE),)
BS_DATE_MINUTE:=$(shell $(BIN_DATE) +%M)
endif
export BS_DATE_MINUTE

ifeq ($(BS_DATE_SECOND),)
BS_DATE_SECOND:=$(shell $(BIN_DATE) +%S)
endif
export BS_DATE_SECOND

ifeq ($(BS_USERNAME),)
BS_USERNAME:=$(shell $(BIN_WHOAMI))
endif
export BS_USERNAME
