#
# Module functions.
#

XMLMD_FUNC_GET_ABSPATH=$(shell $(BIN_CD) $(dir $(1)) && $(BIN_PWD))/$(notdir $(1))

#
# Module rules
#
xmlmd_man:
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) --------------------------------------------------")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) Build System Metadata Module Manual")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) --------------------------------------------------")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX)")
	$(BS_CMDPREFIX_VERBOSE3) $(BIN_BSCATMAN) $(BS_ROOT)/xmlmd/xmlmd.html

xmlmd_info:
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) --------------------------------------------------")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) Build System Metadata Module Macro Settings")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) --------------------------------------------------")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_VALIDATE_CLASS                                 $(XML_VALIDATE_CLASS)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_VALIDATE_CP                                    $(XML_VALIDATE_CP)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_VALIDATE_JAVAFLAGS                             $(XML_VALIDATE_JAVAFLAGS)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_VALIDATE_CMD                                   $(XML_VALIDATE_CMD)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_TRANSFORM_CLASS                                $(XML_TRANSFORM_CLASS)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_TRANSFORM_CP                                   $(XML_TRANSFORM_CP)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_TRANSFORM_JAVAFLAGS                            $(XML_TRANSFORM_JAVAFLAGS)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_TRANSFORM_CMD                                  $(XML_TRANSFORM_CMD)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_TRANSFORM_XSL                                  $(XML_TRANSFORM_XSL)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_TFSPLITXSL                                     $(XML_TFSPLITXSL)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_TFSPLITCMD                                     $(XML_TFSPLITCMD)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_TFSPLITBXSL                                    $(XML_TFSPLITBXSL)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_VALIDATE_TARGETS                               $(XML_VALIDATE_TARGETS)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_TRANSFORM_TARGETS                              $(XML_TRANSFORM_TARGETS)")
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) XML_TFSPLIT_TARGETS                                $(XML_TFSPLIT_TARGETS)")


xmlmd_clean::
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) Cleaning metadata targets")





#
# Validate targets
#

XMLMD_FUNC_GET_XML_VALIDATE_FLAGTARGET=$(BS_NOARCH_FLAG_DIR)/xmlmd_flags_validate/$(1)

_XML_VALIDATE_TARGETS=$(XML_VALIDATE_TARGETS)
_XML_VALIDATE_DEP_GENERATION_TARGETS=$(addprefix _XML_VALIDATE_DEP_,$(XML_VALIDATE_TARGETS))
_XML_VALIDATE_DEPEND_FILE=$(BS_NOARCH_DEPEND_DIR)/xmlmd_depend_validate_noarch.mk
_XML_VALIDATE_FLAG_TARGETS=$(foreach t,$(XML_VALIDATE_TARGETS),$(call XMLMD_FUNC_GET_XML_VALIDATE_FLAGTARGET,$(t)))


ifneq ($(strip $(XML_VALIDATE_TARGETS)),)
-include $(_XML_VALIDATE_DEPEND_FILE)

xmlmd_clean::
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) Cleaning xmlmd module XML_VALIDATE_TARGETS")
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_RM) -rf $(_XML_VALIDATE_FLAG_TARGETS)

endif



$(_XML_VALIDATE_DEPEND_FILE): _XML_VALIDATE_DEP_PREP $(_XML_VALIDATE_DEP_GENERATION_TARGETS)
.INTERMEDIATE:: _XML_VALIDATE_DEP_PREP $(_XML_VALIDATE_DEP_GENERATION_TARGETS)


_XML_VALIDATE_DEP_PREP:
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX) clearing dependency file $(_XML_VALIDATE_DEPEND_FILE)")
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_MKDIR) -p $(dir $(_XML_VALIDATE_DEPEND_FILE))
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_MKDIR) -p $(BS_NOARCH_FLAG_DIR)/xmlmd_flags_validate
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "##" > $(_XML_VALIDATE_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "## Auto generated depend file for XML validate targets" >> $(_XML_VALIDATE_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "##" >> $(_XML_VALIDATE_DEPEND_FILE)


_XML_VALIDATE_DEP_%:
_XML_VALIDATE_DEP_%: _VALIDATE_T=$(*)
_XML_VALIDATE_DEP_%:
_XML_VALIDATE_DEP_%: _VALIDATE_FLAG_TARGET=$(call XMLMD_FUNC_GET_XML_VALIDATE_FLAGTARGET,$*)
_XML_VALIDATE_DEP_%: _XMLFILE=$(if $($*_SRC),$($*_SRC),$*)
_XML_VALIDATE_DEP_%: _SCHEMA=$(if $($*_SCHEMA),$(call XMLMD_FUNC_GET_ABSPATH,$($*_SCHEMA)),)
_XML_VALIDATE_DEP_%: 
_XML_VALIDATE_DEP_%:
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX) Rebuilding dependency for validate target $(*) ")
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "## validate target: $(_VALIDATE_T)" >> $(_XML_VALIDATE_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "$(_VALIDATE_FLAG_TARGET): $(_XMLFILE) $(_SCHEMA)" >> $(_XML_VALIDATE_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "" >> $(_XML_VALIDATE_DEPEND_FILE)


$(_XML_VALIDATE_FLAG_TARGETS): 
$(_XML_VALIDATE_FLAG_TARGETS): _XML_VALIDATE_FLAG_TARGET=$@
$(_XML_VALIDATE_FLAG_TARGETS): _T=$(notdir $@)
$(_XML_VALIDATE_FLAG_TARGETS): _XMLFILE=$(if $($(_T)_SRC),$($(_T)_SRC),$(_T))
$(_XML_VALIDATE_FLAG_TARGETS): _SCHEMA=$(if $($(_T)_SCHEMA),$(call XMLMD_FUNC_GET_ABSPATH,$($(_T)_SCHEMA)),)
$(_XML_VALIDATE_FLAG_TARGETS): 
$(_XML_VALIDATE_FLAG_TARGETS): _CMD=$(if $($(_T)_CMD),$($(_T)_CMD),$(XML_VALIDATE_CMD))
$(_XML_VALIDATE_FLAG_TARGETS): _SAFETY_CMD=$(if $($(_T)_SCHEMA),,@$(BIN_ECHO) "ERROR: No schema specified for validation" && $(BIN_FALSE))
$(_XML_VALIDATE_FLAG_TARGETS): 
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) Validating XML target $(_T)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Target Name               : $(_XMLFILE)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     XML Schema                : $(_SCHEMA)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Validate command          : $(_CMD)")
	$(BS_CMDPREFIX_VERBOSE2) $(_SAFETY_CMD)
	$(BS_CMDPREFIX_VERBOSE2) $(_CMD) $(_SCHEMA) $(_XMLFILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_TOUCH) $(_XML_VALIDATE_FLAG_TARGET)


xmlmd_validate: $(_XML_VALIDATE_FLAG_TARGETS)


#
# Transform targets
#

XMLMD_FUNC_GET_TRANSFORM_REALTARGET=$(if $($(1)_OUTFILE),$($(1)_OUTFILE),$(BS_NOARCH_TARGET_DIR)/$(1))
XMLMD_FUNC_GET_TRANSFORM_FLAGTARGET=$(BS_NOARCH_FLAG_DIR)/xmlmd_flags_transform/$(1)

_XML_TRANSFORM_DEPEND_FILE=$(BS_NOARCH_DEPEND_DIR)/xmlmd_depend_transform_noarch.mk
_XML_TRANSFORM_TARGETS=$(foreach t,$(XML_TRANSFORM_TARGETS),$(call XMLMD_FUNC_GET_TRANSFORM_REALTARGET,$(t)))
_XML_TRANSFORM_FLAG_TARGETS=$(foreach t,$(XML_TRANSFORM_TARGETS),$(call XMLMD_FUNC_GET_TRANSFORM_FLAGTARGET,$(t)))
_XML_TRANSFORM_DEP_GENERATION_TARGETS=$(addprefix _XML_TRANSFORM_DEP_,$(XML_TRANSFORM_TARGETS))


ifneq ($(strip $(XML_TRANSFORM_TARGETS)),)
-include $(_XML_TRANSFORM_DEPEND_FILE)

xmlmd_clean::
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) Cleaning xmlmd module XML_TRANSFORM_TARGETS")
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_RM) -rf $(_XML_TRANSFORM_TARGETS)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_RM) -rf $(_XML_TRANSFORM_FLAG_TARGETS)

endif



$(_XML_TRANSFORM_DEPEND_FILE): _XML_TRANSFORM_DEP_PREP $(_XML_TRANSFORM_DEP_GENERATION_TARGETS)
.INTERMEDIATE:: _XML_TRANSFORM_DEP_PREP $(_XML_TRANSFORM_DEP_GENERATION_TARGETS)


_XML_TRANSFORM_DEP_PREP:
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX) clearing dependency file $(_XML_TRANSFORM_DEPEND_FILE)")
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_MKDIR) -p $(dir $(_XML_TRANSFORM_DEPEND_FILE))
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_MKDIR) -p $(BS_NOARCH_FLAG_DIR)/xmlmd_flags_transform
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "##" > $(_XML_TRANSFORM_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "## Auto generated depend file for XML transform targets" >> $(_XML_TRANSFORM_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "##" >> $(_XML_TRANSFORM_DEPEND_FILE)


_XML_TRANSFORM_DEP_%:
_XML_TRANSFORM_DEP_%: _TRANSFORM_T=$(*)
_XML_TRANSFORM_DEP_%:
_XML_TRANSFORM_DEP_%: _REAL=$(call XMLMD_FUNC_GET_TRANSFORM_REALTARGET,$(*))
_XML_TRANSFORM_DEP_%: _FLAG=$(call XMLMD_FUNC_GET_TRANSFORM_FLAGTARGET,$(*))
_XML_TRANSFORM_DEP_%: _SRC=$(if $($*_SRC),$($*_SRC),$(*))
_XML_TRANSFORM_DEP_%: _XSL=$(if $($*_XSL),$($*_XSL),$(XML_TRANSFORM_XSL))
_XML_TRANSFORM_DEP_%:
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX) Rebuilding dependency for transform target $(*) ")
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "## transform target: $(*)" >> $(_XML_TRANSFORM_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "$(_FLAG): $(_SRC) $(_XSL)" >> $(_XML_TRANSFORM_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "$(_REAL): $(_FLAG)" >> $(_XML_TRANSFORM_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "" >> $(_XML_TRANSFORM_DEPEND_FILE)


$(_XML_TRANSFORM_FLAG_TARGETS): 
$(_XML_TRANSFORM_FLAG_TARGETS): _T=$(notdir $@)
$(_XML_TRANSFORM_FLAG_TARGETS): _TRANSFORM_FLAG_TARGET=$(@)
$(_XML_TRANSFORM_FLAG_TARGETS): _OUT=$(call XMLMD_FUNC_GET_TRANSFORM_REALTARGET,$(_T))
$(_XML_TRANSFORM_FLAG_TARGETS): 
$(_XML_TRANSFORM_FLAG_TARGETS): _XMLFILE=$(if $($(_T)_SRC),$($(_T)_SRC),$(_T))
$(_XML_TRANSFORM_FLAG_TARGETS): _XSLFILE=$(if $($(_T)_XSL),$($(_T)_XSL),$(XML_TRANSFORM_XSL))
$(_XML_TRANSFORM_FLAG_TARGETS): 
$(_XML_TRANSFORM_FLAG_TARGETS): _INSCHEMA=$(if $($(_T)_INSCHEMA),$(call XMLMD_FUNC_GET_ABSPATH,$($(_T)_INSCHEMA)),)
$(_XML_TRANSFORM_FLAG_TARGETS): _OUTSCHEMA=$(if $($(_T)_OUTSCHEMA),$(call XMLMD_FUNC_GET_ABSPATH,$($(_T)_OUTSCHEMA)),)
$(_XML_TRANSFORM_FLAG_TARGETS): _VALCMD=$(if $($(_T)_VALCMD),$($(_T)_VALCMD),$(XML_VALIDATE_CMD))
$(_XML_TRANSFORM_FLAG_TARGETS): _INVALCMD=$(if $($(_T)_INSCHEMA),$(_VALCMD) $(_INSCHEMA) $(_XMLFILE),)
$(_XML_TRANSFORM_FLAG_TARGETS): _OUTVALCMD=$(if $($(_T)_OUTSCHEMA),$(_VALCMD) $(_OUTSCHEMA) $(_OUT),)
$(_XML_TRANSFORM_FLAG_TARGETS): 
$(_XML_TRANSFORM_FLAG_TARGETS): _INCHKCMD=$(if $($(_T)_INCHECK),$($(_T)_INCHECK) $(_XMLFILE),)
$(_XML_TRANSFORM_FLAG_TARGETS): 
$(_XML_TRANSFORM_FLAG_TARGETS): _CMD=$(if $($(_T)_CMD),$($(_T)_CMD),$(XML_TRANSFORM_CMD))
$(_XML_TRANSFORM_FLAG_TARGETS): _SAFETY_CMD=$(if $(_XSLFILE),,@$(BIN_ECHO) "ERROR: No script specified for transformation" && $(BIN_FALSE))
$(_XML_TRANSFORM_FLAG_TARGETS): 
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) Transforming XML target $(_T)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Target Name               : $(_T)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Output File               : $(_OUT)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Source File               : $(_XMLFILE)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     XSL File                  : $(_XSLFILE)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Transform command         : $(_CMD)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     XML Schema (input)        : $(_INSCHEMA)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     XML Schema (output)       : $(_OUTSCHEMA)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Validate command          : $(_VALCMD)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Input checking command    : $(_INCHKCMD)")
	$(BS_CMDPREFIX_VERBOSE2) $(_SAFETY_CMD)
	$(BS_CMDPREFIX_VERBOSE2) $(_INVALCMD)
	$(BS_CMDPREFIX_VERBOSE2) $(_INCHKCMD)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_RM) -f $(_OUT)
	$(BS_CMDPREFIX_VERBOSE2) $(_CMD) $(_XSLFILE) $(_XMLFILE) $(_OUT)
	$(BS_CMDPREFIX_VERBOSE2) $(_OUTVALCMD)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_TOUCH) $(_TRANSFORM_FLAG_TARGET)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_TOUCH) $(_OUT)


xmlmd_transform: $(_XML_TRANSFORM_FLAG_TARGETS)


#
# Transform+split targets
#

XMLMD_FUNC_GET_TFS_REALTARGET=$(if $($(1)_OUT),$($(1)_OUT),$(BS_NOARCH_TARGET_DIR)/$(1))
XMLMD_FUNC_GET_TFS_FLAGTARGET=$(BS_NOARCH_FLAG_DIR)/xmlmd_flags_tfsplit/$(1)

_XML_TFSPLIT_DEPEND_FILE=$(BS_NOARCH_DEPEND_DIR)/xmlmd_depend_tfsplit_noarch.mk
_XML_TFSPLIT_TARGETS=$(XML_TFSPLIT_TARGETS)
_XML_TFSPLIT_DEP_GENERATION_TARGETS=$(addprefix _XML_TFSPLIT_DEP_,$(XML_TFSPLIT_TARGETS))

_XML_TFSPLIT_REAL_TARGETS=$(foreach t,$(XML_TFSPLIT_TARGETS),$(call XMLMD_FUNC_GET_TFS_REALTARGET,$(t)))
_XML_TFSPLIT_FLAG_TARGETS=$(foreach t,$(XML_TFSPLIT_TARGETS),$(call XMLMD_FUNC_GET_TFS_FLAGTARGET,$(t)))

ifneq ($(strip $(XML_TFSPLIT_TARGETS)),)
-include $(_XML_TFSPLIT_DEPEND_FILE)

xmlmd_clean::
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) Cleaning xmlmd module XML_TFSPLIT_TARGETS")
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_RM) -rf $(_XML_TFSPLIT_REAL_TARGETS)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_RM) -rf $(_XML_TFSPLIT_FLAG_TARGETS)

endif



$(_XML_TFSPLIT_DEPEND_FILE): _XML_TFSPLIT_DEP_PREP $(_XML_TFSPLIT_DEP_GENERATION_TARGETS)
.INTERMEDIATE:: _XML_TFSPLIT_DEP_PREP $(_XML_TFSPLIT_DEP_GENERATION_TARGETS)


_XML_TFSPLIT_DEP_PREP:
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX) clearing dependency file $(_XML_TFSPLIT_DEPEND_FILE)")
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_MKDIR) -p $(dir $(_XML_TFSPLIT_DEPEND_FILE))
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_MKDIR) -p $(BS_NOARCH_FLAG_DIR)/xmlmd_flags_tfsplit
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "##" > $(_XML_TFSPLIT_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "## Auto generated depend file for XML tfsplit targets" >> $(_XML_TFSPLIT_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "##" >> $(_XML_TFSPLIT_DEPEND_FILE)


_XML_TFSPLIT_DEP_%:
_XML_TFSPLIT_DEP_%: _TFS_T=$(*)
_XML_TFSPLIT_DEP_%:
_XML_TFSPLIT_DEP_%: _TFS_FLAG_TARGET=$(call XMLMD_FUNC_GET_TFS_FLAGTARGET,$*)
_XML_TFSPLIT_DEP_%: _TFS_REAL_TARGET=$(call XMLMD_FUNC_GET_TFS_REALTARGET,$*)
_XML_TFSPLIT_DEP_%:
_XML_TFSPLIT_DEP_%: _SRC=$(if $($*_SRC),$($*_SRC),$*)
_XML_TFSPLIT_DEP_%: _SXSL=$(if $($*_SPLITXSL),$($*_SPLITXSL),$(XML_TFSPLITXSL))
_XML_TFSPLIT_DEP_%: _SCMD=$(if $($*_SPLITCMD),$($*_SPLITCMD),$(XML_TFSPLITCMD))
_XML_TFSPLIT_DEP_%: _BXSL=$(if $($*_BASEXSL),$($*_BASEXSL),$(XML_TFSPLITBXSL))
_XML_TFSPLIT_DEP_%:
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX) Rebuilding dependency for tfsplit target $(*) ")
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "## tfsplit target: $(*)" >> $(_XML_TFSPLIT_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "$(_TFS_FLAG_TARGET): $(_SRC) $(_SXSL) $(_SCMD) $(_BXSL)" >> $(_XML_TFSPLIT_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "$(_TFS_REAL_TARGET): $(_TFS_FLAG_TARGET)" >> $(_XML_TFSPLIT_DEPEND_FILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_ECHO) "" >> $(_XML_TFSPLIT_DEPEND_FILE)


$(_XML_TFSPLIT_FLAG_TARGETS): 
$(_XML_TFSPLIT_FLAG_TARGETS): _TFSPLIT_FLAG_TARGET=$(@)
$(_XML_TFSPLIT_FLAG_TARGETS): _T=$(notdir $@)
$(_XML_TFSPLIT_FLAG_TARGETS): 
$(_XML_TFSPLIT_FLAG_TARGETS): _OUT=$(call XMLMD_FUNC_GET_TFS_REALTARGET,$(_T))
$(_XML_TFSPLIT_FLAG_TARGETS): _XMLFILE=$(if $($(_T)_SRC),$($(_T)_SRC),$(_T))
$(_XML_TFSPLIT_FLAG_TARGETS): 
$(_XML_TFSPLIT_FLAG_TARGETS): _SCHEMA=$(if $($(_T)_SCHEMA),$(call XMLMD_FUNC_GET_ABSPATH,$($(_T)_SCHEMA)),)
$(_XML_TFSPLIT_FLAG_TARGETS): _VALCMD=$(if $($(_T)_VALCMD),$($(_T)_VALCMD),$(XML_VALIDATE_CMD))
$(_XML_TFSPLIT_FLAG_TARGETS): _INVALCMD=$(if $($(_T)_SCHEMA),$(_VALCMD) $(_SCHEMA) $(_XMLFILE),)
$(_XML_TFSPLIT_FLAG_TARGETS): 
$(_XML_TFSPLIT_FLAG_TARGETS): _CMD=$(if $($(_T)_CMD),$($(_T)_CMD),$(XML_TRANSFORM_CMD))
$(_XML_TFSPLIT_FLAG_TARGETS): 
$(_XML_TFSPLIT_FLAG_TARGETS): _BASEFILE=$(if $($(_T)_BASEOUT),$(_OUT)/$($(_T)_BASEOUT))
$(_XML_TFSPLIT_FLAG_TARGETS): _BXSLFILE=$(if $($(_T)_BASEXSL),$($(_T)_BASEXSL),$(XML_TFSPLITBXSL))
$(_XML_TFSPLIT_FLAG_TARGETS): _BASECMD=$(if $(_BASEFILE),$(if $(_BXSLFILE),$(_CMD) $(_BXSLFILE) $(_XMLFILE) $(_BASEFILE),$(BIN_CP) $(_XMLFILE) $(_BASEFILE)))
$(_XML_TFSPLIT_FLAG_TARGETS): 
$(_XML_TFSPLIT_FLAG_TARGETS): _TMPFILE=$(BS_NOARCH_TARGET_DIR)/$(_T).splittmp
$(_XML_TFSPLIT_FLAG_TARGETS): 
$(_XML_TFSPLIT_FLAG_TARGETS): _SXSLFILE=$(if $($(_T)_SPLITXSL),$($(_T)_SPLITXSL),$(XML_TFSPLITXSL))
$(_XML_TFSPLIT_FLAG_TARGETS): _SPLITCMD=$(if $($(_T)_SPLITCMD),$($(_T)_SPLITCMD),$(XML_TFSPLITCMD))
$(_XML_TFSPLIT_FLAG_TARGETS): 
$(_XML_TFSPLIT_FLAG_TARGETS): _SAFETY_CMD=$(if $(_SXSLFILE),,@$(BIN_ECHO) "ERROR: No script specified for transformation" && $(BIN_FALSE))
$(_XML_TFSPLIT_FLAG_TARGETS): 
	@$(call BS_FUNC_ECHO_VERBOSE0,"$(BS_INFO_PREFIX) Transforming (with split) XML target $(_T)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Target Name               : $(_T)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Output Directory          : $(_OUT)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Source File               : $(_XMLFILE)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     XSL (split) File          : $(_SXSLFILE)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     XSL (base) File           : $(_BXSLFILE)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Transform command         : $(_CMD)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     File split command        : $(_SPLITCMD)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Base file create command  : $(_BASECMD)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     XML Schema (input)        : $(_SCHEMA)")
	@$(call BS_FUNC_ECHO_VERBOSE2,"$(BS_INFO_PREFIX)     Validate command          : $(_INVALCMD)")
	$(BS_CMDPREFIX_VERBOSE2) $(_SAFETY_CMD)
	$(BS_CMDPREFIX_VERBOSE2) $(_INVALCMD)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_RM) -f $(_TMPFILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_RM) -rf $(_OUT)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_MKDIR) -p $(_OUT)
	$(BS_CMDPREFIX_VERBOSE2) $(_BASECMD)
	$(BS_CMDPREFIX_VERBOSE2) $(_CMD) $(_SXSLFILE) $(_XMLFILE) $(_TMPFILE)
	$(BS_CMDPREFIX_VERBOSE2) $(_SPLITCMD) $(_TMPFILE) $(_OUT)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_RM) -f $(_TMPFILE)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_TOUCH) $(_TFSPLIT_FLAG_TARGET)
	$(BS_CMDPREFIX_VERBOSE2) $(BIN_TOUCH) $(_OUT)


xmlmd_tfsplit: $(_XML_TFSPLIT_FLAG_TARGETS)


#
# hook module rules into build system.
#


info:: xmlmd_info

man:: xmlmd_man

clean:: xmlmd_clean

depends:: _XML_VALIDATE_DEP_PREP $(_XML_VALIDATE_DEP_GENERATION_TARGETS)
depends:: _XML_TRANSFORM_DEP_PREP $(_XML_TRANSFORM_DEP_GENERATION_TARGETS)
depends:: _XML_TFSPLIT_DEP_PREP $(_XML_TFSPLIT_DEP_GENERATION_TARGETS)

pretarget:: xmlmd_validate

target:: xmlmd_transform xmlmd_tfsplit

posttarget::

.PHONY:: xmlmd_info xmlmd_man xmlmd_clean xmlmd_validate xmlmd_transform xmlmd_tfsplit

